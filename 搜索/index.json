[{"content":"3D设计软件 FreeCAD https://github.com/FreeCAD/FreeCAD\n日常工作需要审核机械设计师在 Solidworks 中绘制的 3D 图纸，于是就下了这个开源软件。该软件还支持 3D 设计，但是我没有这种需求。\n让我同事在 Solidworks 中导出 Step 文件，再在 FreeCAD 中打开即可。第一次打开 step 时要设置文本编码方式，选择 GBK，否则 step 文件中的中文会乱码。\n远程桌面 1Remote https://github.com/1Remote/1Remote\n开源软件，该软件可以记录多个远程桌面的配置（IP地址+用户+密码），下次使用双击打开即可。\nRSS阅读 Follow https://github.com/RSSNext/follow\n开源软件，可以使用RSS订阅很多网站，这样每天只要打开 Follow 就可以看到很多网站的更新。另外还有一点好处是可以看到其他用户订阅的内容，这样可以扩展自己的知识面。\n这个软件的功能是受限的，想解锁需要激活码，我是问别人要的。\n笔记软件 Wolai https://www.wolai.com/\n国内仿 Notion 比较好的软件，挺好用，需要按年开会员，否则功能受限。\n输入法中英文提示软件 InputTip https://github.com/abgox/InputTip\n写代码的时候需要频繁切换中英文，老是忘记看右下角，有了这个软件之后在输入的地方就会有一个悬浮图标指示大写/中文/英文。\n截图软件 PixPin https://pixpin.cn/\n贼好用的截图软件，完全覆盖了 Snipaste 的功能，除此以外可以离线OCR，长截图，录制Gif，功能很多。\n文件同步软件 坚果云 https://www.jianguoyun.com/\n可以无感同步文件，在不同的电脑上访问，我用的是免费的 1G 空间，同步一些日常用的文件。\n数据库管理软件 Heidi SQL https://www.heidisql.com/\n开源的数据库管理软件，支持很多类型的连接。\n视频播放器 PotPlayer http://www.potplayercn.com/\n贼好用的视频播放器，功能很多，比如倍速播放，看直播源等等。\nMarkdown编辑器 Typora 好用的 Markdown 编辑器，比其他的编辑器都好用，主要是很方便预览。\nhttps://typora.io/\n简易CSharp编辑器 LinqPad 8 https://www.linqpad.net/\n很方便的 C# 编辑器，使用 BenchMark 特别方便，跟写 Python 一样。\n多功能编辑器 VSCode https://code.visualstudio.com/\n支持的文件很多，比如装插件可以看 SQL.db 文件，可以看 Excel 文件，算是高级文本编辑器。\n还可以使用 Polyglot NoteBook 写 C#，跟 Jupyter NoteBook 类似，但是会有一些限制，而且代码提示没有 LinqPad 8 好用。\n文本编辑器 Sublime Text https://www.sublimetext.com/\n轻量化的文本编辑器，颜值很高。需要一点设置才能支持中文。\n多功能启动器 uTools https://www.u.tools/\n神。\n右键菜单美化 NileSoft Shell https://nilesoft.org/\n升级 Windows 11 后右键菜单不是很好用，所以下了这个软件，给右键菜单新增了额外的功能，并且颜值很高。\n","date":"2025-01-17T16:41:10+08:00","image":"https://zeroszhang.github.io/p/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/Title_hu2797607451022691929.jpg","permalink":"https://zeroszhang.github.io/p/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/","title":"软件推荐"},{"content":"简介 BaseWPFControl 是一个 dll，基于 .net 8.0 和 WPF 框架实现，用于提供控件样式（包含基础控件和额外控件）。\n基础控件 Button 重写了基础控件 Button 的样式。\n新增 BaseWPFControl:ButtonProperty.Icon 附加属性用于提供按钮图标 提供圆角 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;Button Content=\u0026#34;纯文字按钮\u0026#34; Margin=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;Button Content=\u0026#34;图标\u0026#34; Margin=\u0026#34;10\u0026#34; BaseWPFControl:ButtonProperty.Icon=\u0026#34;{StaticResource HomePage}\u0026#34; /\u0026gt; \u0026lt;Button Content=\u0026#34;圆形按钮\u0026#34; Margin=\u0026#34;10\u0026#34; Style=\u0026#34;{StaticResource CircleButtonStyle}\u0026#34; /\u0026gt; \u0026lt;Button Content=\u0026#34;带图标的圆形按钮\u0026#34; Margin=\u0026#34;10\u0026#34; Style=\u0026#34;{StaticResource CircleButtonStyle}\u0026#34; BaseWPFControl:ButtonProperty.Icon=\u0026#34;{StaticResource HomePage}\u0026#34; /\u0026gt; \u0026lt;Button Content=\u0026#34;跑道形按钮\u0026#34; Margin=\u0026#34;10\u0026#34; Style=\u0026#34;{StaticResource RoundButtonStyle}\u0026#34; /\u0026gt; \u0026lt;Button Content=\u0026#34;图标\u0026#34; Margin=\u0026#34;10\u0026#34; Style=\u0026#34;{StaticResource RoundButtonStyle}\u0026#34; BaseWPFControl:ButtonProperty.Icon=\u0026#34;{StaticResource HomePage}\u0026#34; /\u0026gt; 针对不启用和不可点击的按钮，做出了区分，分别对应 IsEnabled 和 IsHitTestVisible 属性。\n1 2 \u0026lt;Button Content=\u0026#34;不启用\u0026#34; IsEnabled=\u0026#34;False\u0026#34; Margin=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;Button Content=\u0026#34;不可点击\u0026#34; IsHitTestVisible=\u0026#34;False\u0026#34; Margin=\u0026#34;10\u0026#34; /\u0026gt; 之所以这样去做目的是为了 GPIO 的控制，GPI 不可点击，GPO 可点击。\n提供了两种相似的样式 BooleanStateButtonStyle 和 BooleanToggleButtonStyle。前者对应于 GPI，不可点击，仅用于展示 GPI 状态，后者对应于 GPO，既可以展示 GPO 状态，又可以通过点击切换状态。\n1 2 3 4 \u0026lt;Button Style=\u0026#34;{StaticResource BooleanStateButtonStyle}\u0026#34; Margin=\u0026#34;10\u0026#34; Tag=\u0026#34;{Binding State}\u0026#34; /\u0026gt; \u0026lt;Button Style=\u0026#34;{StaticResource BooleanToggleButtonStyle}\u0026#34; Margin=\u0026#34;10\u0026#34; Tag=\u0026#34;{Binding State}\u0026#34; Command=\u0026#34;{Binding ChangeStateCommand}\u0026#34; /\u0026gt; ToggleButton 基于 ToggleButton 重写样式，该控件的本意是用于 GPIO 的控制\n1 2 3 \u0026lt;ToggleButton IsChecked=\u0026#34;{Binding State}\u0026#34; Margin=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;ToggleButton IsChecked=\u0026#34;{Binding State}\u0026#34; Margin=\u0026#34;10\u0026#34; IsEnabled=\u0026#34;False\u0026#34; /\u0026gt; 最终方案如下：\nGPI 使用 Button 的 BooleanStateButtonStyle 样式 GPO 使用 ToggleButton 的默认样式。 RadioButton 重写 RadioButton 的样式，主要优化如下：\n勾选后样式变化 勾选框尺寸跟随字体尺寸变化 1 2 3 4 5 \u0026lt;RadioButton Content=\u0026#34;未勾选\u0026#34; /\u0026gt; \u0026lt;RadioButton Content=\u0026#34;勾选\u0026#34; IsChecked=\u0026#34;True\u0026#34; /\u0026gt; \u0026lt;RadioButton Content=\u0026#34;未勾选未启用\u0026#34; IsEnabled=\u0026#34;False\u0026#34; IsChecked=\u0026#34;False\u0026#34; /\u0026gt; \u0026lt;RadioButton Content=\u0026#34;勾选未启用\u0026#34; IsEnabled=\u0026#34;False\u0026#34; IsChecked=\u0026#34;True\u0026#34; /\u0026gt; \u0026lt;RadioButton Content=\u0026#34;大字体\u0026#34; FontSize=\u0026#34;30\u0026#34; /\u0026gt; CheckBox 重写 CheckBox 的样式，主要优化如下：\n勾选后样式变化 勾选框圆角 勾选框尺寸跟随字体尺寸变化 1 2 3 4 5 \u0026lt;CheckBox Content=\u0026#34;未勾选\u0026#34; /\u0026gt; \u0026lt;CheckBox Content=\u0026#34;勾选\u0026#34; IsChecked=\u0026#34;True\u0026#34; /\u0026gt; \u0026lt;CheckBox Content=\u0026#34;未勾选未启用\u0026#34; IsEnabled=\u0026#34;False\u0026#34; IsChecked=\u0026#34;False\u0026#34; /\u0026gt; \u0026lt;CheckBox Content=\u0026#34;勾选未启用\u0026#34; IsEnabled=\u0026#34;False\u0026#34; IsChecked=\u0026#34;True\u0026#34; /\u0026gt; \u0026lt;CheckBox Content=\u0026#34;大字体\u0026#34; FontSize=\u0026#34;30\u0026#34; /\u0026gt; ComboBox 重写 ComboBox 样式，主要优化如下：\n圆角属性 提供 ComboBox 绑定枚举值的扩展语法 EnumBindingSource 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;!--示例1：ComboBox绑定枚举值--\u0026gt; \u0026lt;ComboBox Margin=\u0026#34;10\u0026#34; Width=\u0026#34;120\u0026#34; ItemsSource=\u0026#34;{BaseWPFControl:EnumBindingSource EnumType=BaseTest:EnumDayOfWeek}\u0026#34; SelectedItem=\u0026#34;{Binding SelectedEnumDayOfWeek}\u0026#34; \u0026gt; \u0026lt;ComboBox.ItemTemplate\u0026gt; \u0026lt;DataTemplate\u0026gt; \u0026lt;TextBlock Text=\u0026#34;{Binding Converter={StaticResource EnumToDescriptionConverter}, Mode=OneWay}\u0026#34; /\u0026gt; \u0026lt;/DataTemplate\u0026gt; \u0026lt;/ComboBox.ItemTemplate\u0026gt; \u0026lt;/ComboBox\u0026gt; \u0026lt;!--示例2：不启用ComboBox--\u0026gt; \u0026lt;ComboBox Margin=\u0026#34;10\u0026#34; Width=\u0026#34;120\u0026#34; IsEnabled=\u0026#34;False\u0026#34; \u0026gt; \u0026lt;ComboBoxItem Content=\u0026#34;1\u0026#34; IsSelected=\u0026#34;True\u0026#34; /\u0026gt; \u0026lt;/ComboBox\u0026gt; \u0026lt;!--示例3：ComboBox绑定字典--\u0026gt; \u0026lt;!--note：需要设置 DisplayMemberPath 和 SelectedValuePath，--\u0026gt; \u0026lt;!--note：并只能使用 SelectedValue 进行访问--\u0026gt; \u0026lt;ComboBox Margin=\u0026#34;10\u0026#34; Width=\u0026#34;120\u0026#34; ItemsSource=\u0026#34;{Binding DictionaryDayOfWeek}\u0026#34; DisplayMemberPath=\u0026#34;Value\u0026#34; SelectedValuePath=\u0026#34;Key\u0026#34; SelectedValue=\u0026#34;{Binding SelectedDictionaryDayOfWeek}\u0026#34; /\u0026gt; \u0026lt;!--示例4：ComboBox绑定列表--\u0026gt; \u0026lt;!--note：使用 SelectedItem 或者 SelectedValue 都可以获得正确结果--\u0026gt; \u0026lt;!--note: 前提是绑定的值在列表中，也可以通过 SelectedIndex 进行访问--\u0026gt; \u0026lt;ComboBox Margin=\u0026#34;10\u0026#34; Width=\u0026#34;120\u0026#34; ItemsSource=\u0026#34;{Binding ListDayOfWeek}\u0026#34; SelectedItem=\u0026#34;{Binding SelectedListDayOfWeek}\u0026#34; /\u0026gt; TextBlock 重写 TextBlock 的样式，主要优化如下：\n中英文使用不同的字体显示，中文使用微软雅黑，英文使用Consolas 1 2 \u0026lt;TextBlock Text=\u0026#34;显示中文\u0026#34; Margin=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;TextBlock Text=\u0026#34;Show English\u0026#34; Margin=\u0026#34;10\u0026#34; /\u0026gt; MemoryBlock 该控件为自定义控件，主要实现以下功能：\n获取当前软件已使用内存，以 MB 为单位 可以通过控件的 Interval 属性设置更新频率，单位为 ms，默认为 1000 ms 可以通过控件的 Header 属性设置前缀文字 可以通过控件的 UsedMemory 只读属性获取内存 1 \u0026lt;BaseWPFControl:MemoryBlock Margin=\u0026#34;10\u0026#34; /\u0026gt; LogBlock 该控件为自定义控件，配合 BaseLogManager 一起使用，主要实现以下功能：\n显示日志 提供日志详情页 1 2 3 4 \u0026lt;BaseWPFControl:LogBlock x:Name=\u0026#34;LogBlock_Test\u0026#34; /\u0026gt; \u0026lt;ContentControl Height=\u0026#34;400\u0026#34; Margin=\u0026#34;10\u0026#34; Content=\u0026#34;{Binding ElementName=LogBlock_Test, Path=LogView}\u0026#34; /\u0026gt; TextBox 重写 TextBox 的样式，主要实现以下功能：\n可以通过 TextBoxProperty.Prefix 属性设置前缀文字 可以通过 TextBoxProperty.WaterMask 属性设置水印文字 可以通过 TextBoxProperty.Suffix 属性设置后缀文字 输入时边框高亮显示 大文本输入框可以通过滚动条上下滚动 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;TextBox Width=\u0026#34;200\u0026#34; Margin=\u0026#34;10\u0026#34; BaseWPFControl:TextBoxProperty.Prefix=\u0026#34;www.\u0026#34; BaseWPFControl:TextBoxProperty.Suffix=\u0026#34;.com\u0026#34; BaseWPFControl:TextBoxProperty.WaterMask=\u0026#34;输入网址\u0026#34; /\u0026gt; \u0026lt;TextBox Width=\u0026#34;160\u0026#34; Margin=\u0026#34;10\u0026#34; Text=\u0026#34;默认文本框\u0026#34; /\u0026gt; \u0026lt;TextBox Width=\u0026#34;100\u0026#34; Margin=\u0026#34;10\u0026#34; BaseWPFControl:TextBoxProperty.WaterMask=\u0026#34;绑定Decimal类型\u0026#34; Text=\u0026#34;{Binding DecimalNumber, StringFormat=0.#}\u0026#34; /\u0026gt; \u0026lt;TextBox Style=\u0026#34;{StaticResource BigTextBox}\u0026#34; Width=\u0026#34;400\u0026#34; Height=\u0026#34;100\u0026#34; Margin=\u0026#34;10\u0026#34; Text=\u0026#34;{Binding Poetry1}\u0026#34; /\u0026gt; NumericBox NumericBox 为自定义控件，主要实现以下功能：\n更方便的绑定数字，并提供限制 可以通过 Value 属性获取/设置值 可以通过 TextFormat 属性设置文本格式 可以通过 MinValue 属性设置最小值 可以通过 MaxValue 属性设置最大值 可以通过 Interval 属性设置点击增减按钮时的变化量 可以通过 ValueChanged 事件获取值改变事件 1 2 3 4 5 \u0026lt;BaseWPFControl:NumericBox Value=\u0026#34;{Binding DecimalNumber}\u0026#34; TextFormat=\u0026#34;0.#\u0026#34; MinValue = \u0026#34;0\u0026#34; MaxValue = \u0026#34;100\u0026#34; Interval = \u0026#34;1\u0026#34; ValueChanged=\u0026#34;NumericBox_ValueChanged\u0026#34; /\u0026gt; \u0026lt;BaseWPFControl:NumericBox Value=\u0026#34;{Binding DecimalNumber}\u0026#34; TextFormat=\u0026#34;0.#\u0026#34; IsEnabled=\u0026#34;False\u0026#34; /\u0026gt; PasswordBox 重写 PasswordBox 样式，主要实现以下功能：\n可以通过 PasswordBoxProperty.CanShowPassword 属性设置是否显示密码的功能 1 2 3 \u0026lt;PasswordBox Width=\u0026#34;200\u0026#34; Margin=\u0026#34;10\u0026#34; Password=\u0026#34;123456\u0026#34; /\u0026gt; \u0026lt;PasswordBox Width=\u0026#34;200\u0026#34; Margin=\u0026#34;10\u0026#34; Password=\u0026#34;123456\u0026#34; BaseWPFControl:PasswordBoxProperty.CanShowPassword=\u0026#34;False\u0026#34; /\u0026gt; DatePicker \u0026amp; DateTimePicker DatePicker 和 DateTimePicker 都是自定义控件，主要实现以下功能：\n选择时间和日期，这两个控件的区别在于一个前者只有日期，后者包含时间 可以通过 SelectedDateTime 获取选中的日期时间 可以通过 SelectedDateTimeFormat 设置日期时间的格式 可以通过 SelectedDateTimeChanged 获取时间改变的事件 1 2 \u0026lt;BaseWPFControl:DatePicker Margin=\u0026#34;10\u0026#34; /\u0026gt; \u0026lt;BaseWPFControl:DateTimePicker Margin=\u0026#34;10\u0026#34; /\u0026gt; SelectFileBlock \u0026amp; SelectFolderBlock SelectFileBlock 和 SelectFolderBlock 都是自定义控件，主要实现以下功能：\n点击按钮通过对话框选择文件或者文件夹 可以通过 SelectedPath 属性获取/设置路径 可以通过 SelectedPathChanged 获取选中路径改变的事件 SelectFileBlock 可以通过 ExtensionFilter 属性设置文件过滤 鼠标移动到文字上方出现 ToolTip 显示路径的全文 鼠标双击文字直接跳转到路径所在的文件夹 Image 提供一些内置的 SVG，可以直接通过 Source 绑定 StaticResource 值进行设置\n1 \u0026lt;Image Source=\u0026#34;{StaticResource DirectoryConfig}\u0026#34; Height=\u0026#34;50\u0026#34; Margin=\u0026#34;10\u0026#34; /\u0026gt; ProgressBar \u0026amp; Loading 重写 ProgressBar 样式，提供圆角 可以通过 ProgressBarProperty.ShowValue 属性设置进度条显示当前值 提供扩展函数 SetAnimateValue 设置进度条的值，通过该函数设置可以显示动画 提供自定义控件圆形进度条 Loading，仅用于等待功能 1 2 3 4 \u0026lt;ProgressBar Height=\u0026#34;40\u0026#34; Width=\u0026#34;400\u0026#34; d:Value=\u0026#34;20\u0026#34;/\u0026gt; \u0026lt;ProgressBar Height=\u0026#34;40\u0026#34; Width=\u0026#34;400\u0026#34; IsIndeterminate=\u0026#34;True\u0026#34;/\u0026gt; \u0026lt;BaseWPFControl:Loading Diameter=\u0026#34;150\u0026#34; StrokeThickness=\u0026#34;30\u0026#34; Content=\u0026#34;加载中，请等待...\u0026#34; /\u0026gt; Clock \u0026amp; Calendar 重写 Calender 样式 提供 自定义控件 Clock，用于选择时间 1 2 3 \u0026lt;Calendar x:Name = \u0026#34;Calendar\u0026#34; /\u0026gt; \u0026lt;BaseWPFControl:Clock Height=\u0026#34;{Binding ActualHeight, ElementName=Calender}\u0026#34;/\u0026gt; TabControl 重写 TabControl 的样式\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;TabControl TabStripPlacement=\u0026#34;Left\u0026#34;\u0026gt; \u0026lt;TabItem Header=\u0026#34;水调歌头\u0026#34; \u0026gt; \u0026lt;TextBlock Text=\u0026#34;{Binding Poetry1}\u0026#34; FontSize=\u0026#34;14\u0026#34; /\u0026gt; \u0026lt;/TabItem\u0026gt; \u0026lt;TabItem Header=\u0026#34;如梦令\u0026#34; \u0026gt; \u0026lt;TextBlock Text=\u0026#34;{Binding Poetry2}\u0026#34; FontSize=\u0026#34;14\u0026#34; /\u0026gt; \u0026lt;/TabItem\u0026gt; \u0026lt;TabItem Header=\u0026#34;破阵子\u0026#34; \u0026gt; \u0026lt;TextBlock Text=\u0026#34;{Binding Poetry3}\u0026#34; FontSize=\u0026#34;14\u0026#34; /\u0026gt; \u0026lt;/TabItem\u0026gt; \u0026lt;TabItem Header=\u0026#34;未启用\u0026#34; IsEnabled=\u0026#34;False\u0026#34; /\u0026gt; \u0026lt;/TabControl\u0026gt; 复杂控件 ConfigControl 提供自定义控件 ConfigControl，用于方便的实现配置界面\n1 2 3 4 5 6 7 \u0026lt;BaseWPFControl:ConfigControl ConfigName=\u0026#34;日期时间\u0026#34;\u0026gt; \u0026lt;BaseWPFControl:DateTimePicker /\u0026gt; \u0026lt;/BaseWPFControl:ConfigControl\u0026gt; \u0026lt;BaseWPFControl:ConfigControl ConfigName=\u0026#34;选择文件\u0026#34;\u0026gt; \u0026lt;BaseWPFControl:SelectFileBlock Width=\u0026#34;280\u0026#34; /\u0026gt; \u0026lt;/BaseWPFControl:ConfigControl\u0026gt; LisBox 重写 ListBox 的样式，可以绑定 Enum/List/Dictionary\nListView 重写 ListView 的样式 DataGrid 重写 DataGrid 的样式，这里包含两种样式，一种是选择单元格，另一种是鼠标经过选中整行\n","date":"2025-01-17T11:25:07+08:00","image":"https://zeroszhang.github.io/p/wpf%E6%8E%A7%E4%BB%B6%E5%BA%93-basewpfcontrol/Title_hu1828054865294139777.jpg","permalink":"https://zeroszhang.github.io/p/wpf%E6%8E%A7%E4%BB%B6%E5%BA%93-basewpfcontrol/","title":"WPF控件库 BaseWPFControl"}]